#include <stdio.h>
#include<iostream>
#include<bits/stdc++.h>

using namespace std;
template <typename T>
class Graph{
    //template <typename T>
    map<T,list<T>> l;
    public :
    void addedge(int x,int y){
        l[x].push_back(y);
    }
    void dfs_helper(T src ,map<T,bool> &visited){
        cout<<src<<" ";
        visited[src]=true;
        for (T nbr:l[src]){
            if(!visited[nbr])
            {
                dfs_helper(nbr,visited);
            }
            
        }
        return;
    }
    void dfs(T src){
        map<T,bool> visited;
        for(auto p : l){
            T node=p.first;
            visited[node]=false;
        }
        dfs_helper(src,visited);
    }
    
    
};

int main()
{
Graph<int> g;
g.addedge(1,2);
g.addedge(2,4);
g.addedge(1,3);
g.addedge(3,5);
g.dfs(1);
return 0;
}
